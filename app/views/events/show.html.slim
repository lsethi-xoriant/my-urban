.main-wrapper
  .content-wrapper.not-main
    = render "partials/header"
    .content.events.event-single
      .ev-img
        .ev-img-shadow
        - if @event.avatar && @event.avatar.avatar.file.exists? && @event.avatar.avatar_url(:large_image)
          = image_tag @event.avatar.avatar_url(:large_image)
        -else
          = image_tag "event-item-backgr.jpg"
      .row
        .ev-title
          .come-to-ev
            - if confirm_ability(@event) == 'can'
              = simple_form_for @plan do |f|
                = f.hidden_field :measure_id,  value: @event.id
                - if current_user.come(@plan.measure_id)
                  = button_to 'Не йтиму', plan_path(@plan), name: 'do_not_go', :method => :delete, :class => "btn-5"
                - elsif current_user.in_turn(@event.id)
                  | You are in turn 
                  = button_to 'Uncoming from turn', plan_path(@plan), name: 'do_not_go_turn', :method => :delete, :class => "btn-5"
                - elsif !current_user.come(@plan.measure_id)
                  - if check_for_availability(@event.id)
                    = f.submit I18n.t('event.reg_at'), name: 'come', :class => "btn-5"
                  - else
                    ' All the places are occupied. Go in
                    = f.submit 'Turn', name: 'turn'
            - elsif confirm_ability(@event) == 'not_friend'
              p This event are close, you aren't friend
            - elsif confirm_ability(@event) == 'not_user'
              p Sign in or Sign up
          h1 = @event.name
          p.ev-start
            =t('header.begin')
            |:  
            = I18n.l @event.timeStart, :format => :single_event
            |, 
            = I18n.l @event.data.to_date, :format => :single_event
      .row.ev-single-info
        .medium-4.small-12.columns.ev-single-main-info
          .ev-category.ev-list-type.ev-party
            = category_icon(@event.id)
            = Category.find_by_id(@event.category_id).title
          - if current_user && (current_user.id == @event.user.id)
            = link_to 'Видалити подію', event_path(@event), :method => :delete, :data => { :confirm => 'Are you sure?' }
            |  
            = link_to 'Редагувати подію', edit_event_path(@event)
          .ev-address
            - if @event.street_name?
              span[id = "st_name"]
            - else 
              span[id = "st_name" class = "hide"]
            - if @event.street_number?
              span[id = "st_num"]
            - else 
              span[id = "st_num" class = "hide"]
            = city_name(@event.id)
            /= @event.city_name
          h4.organizer
            -if @event.user.avatar && @event.user.avatar.avatar.file.exists?
              = link_to(image_tag(@event.user.avatar.avatar_url(:small)), {:action => "own_user", :controller => "users", :id => @event.user.id})
              /= image_tag @event.user.avatar.avatar_url(:small)
            -else
              = image_tag "ev-list-user.jpg"
            =t('events.organizer')
            span  =@event.user.first_name + ' ' + @event.user.last_name
          .ev-members
            | 
            =I18n.t('events.members')
            span  
              = @event.all_relationships.count
              | /
              = number_format_people_count(@event.id)
            .ev-members-items
              -@event.all_participations[0..17].each do |u|
                = link_to 'javascript:void(0);' do
                  - if u.avatar && u.avatar.avatar.file.exists?
                    = link_to(image_tag(u.avatar.avatar_url(:small)), {:action => "own_user", :controller => "users", :id => u.id})
                  - else
                    = image_tag "user-sm-2.jpg"

            - if @event.all_participations.length > 18
              - count = @event.all_participations.length - 18
              = link_to "Решта #{count} #{case_of_member(count)}", event_path(id: @event.id, status: 'more_members'), remote: true, class: 'other_member'

        .medium-8.small-12.columns.ev-single-descr-info
          .ev-description
            p = @event.description
          .map-wr
            script[src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry&language=#{I18n.locale.to_s}" type="text/javascript"]
            script[src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js" type="text/javascript"]
            div[style="width: 100%;"]
              #map[style="width: 100%; height: 300px;"]
            - content_for :scripts do
              script
                |  handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ markers = handler.addMarkers(#{raw @hash.to_json}); handler.bounds.extendWith(markers); handler.fitMapToBounds(); }); 
                |      var findResult = function(results, name){ var result =  _.find(results, function(obj){ return obj.types[0] == name && obj.types[1] == "political"; }); return result ? result.short_name : null;  };

                | function getAddress(){ var latlng = new google.maps.LatLng(#{@event.latitude}, #{@event.longitude});  geocoder = new google.maps.Geocoder();  geocoder.geocode({'latLng': latlng}, function(results, status) { if (status == google.maps.GeocoderStatus.OK) { results = results[0].address_components;   var city = findResult(results, "locality");  var route = results[0].short_name; var street = results[1].short_name; $('#st_num').html(route + ", "); $('#st_name').html(street + " ");} }); };
                | getAddress();
    = render "partials/footer"


