.main-wrapper
  .content-wrapper.not-main
    = render "partials/header"
    .content.events.event-single
      .ev-img
        .ev-img-shadow
        - if @event.avatar && @event.avatar.avatar.file.exists? && @event.avatar.avatar_url(:large_image)
          = image_tag @event.avatar.avatar_url(:large_image)
        -else
          = default_background_event(@event.id)
      .row
        .ev-title
          .come-to-ev
            - if current_user && (current_user.id == @event.user.id)
              .ev-manage
                = link_to I18n.t('event.control'), "javascript:void(0);", class:"btn-5"
                .ev-menage-show
                  = link_to I18n.t('event.del_event'), event_path(@event), :method => :delete, :data => { :confirm => 'Are you sure?' }, class:"btn-4"
                  |  
                  = link_to I18n.t('event.edit_event'), edit_event_path(@event), class:"btn-4"

            - if confirm_ability(@event) == 'can'
              = simple_form_for @plan do |f|
                = f.hidden_field :measure_id,  value: @event.id
                - if current_user.come(@plan.measure_id)
                  = button_to 'Не йтиму', plan_path(@plan), name: 'do_not_go', :method => :delete, :class => "btn-5"
                - elsif current_user.in_turn(@event.id)
                  | You are in turn 
                  = button_to 'Uncoming from turn', plan_path(@plan), name: 'do_not_go_turn', :method => :delete, :class => "btn-5"
                - elsif !current_user.come(@plan.measure_id)
                  - if check_for_availability(@event.id)
                    = f.submit I18n.t('event.reg_at'), name: 'come', :class => "btn-5"
                  - else
                    ' All the places are occupied. Go in
                    = f.submit 'Turn', name: 'turn'
            - elsif confirm_ability(@event) == 'not_friend'
              p = I18n.t('event.you_are_not_friend')
            - elsif confirm_ability(@event) == 'not_user'
              p =I18n.t('event.sing_in_up')
          h1 = @event.name
          p.ev-start
            =t('header.begin')
            |:  
            = I18n.l @event.timeStart, :format => :single_event
            |, 
            = I18n.l @event.data.to_date, :format => :single_event
      .row.ev-single-info
        .medium-4.small-12.columns.ev-single-main-info
          .ev-category.ev-list-type.ev-party
            = category_icon(@event.id)
            = Category.find_by_id(@event.category_id).title
            / = form_for @event, :html => {:multipart => true}, :method => 'post', url: {:controller => 'events', :action => 'upload_picture'} do |f|
            /   = hidden_field_tag :id, @event.id
            /   = file_field_tag "pictures[]", type: :file, multiple: true
            /   = hidden_field_tag(:picture, 'picture')
            /   = f.submit I18n.t("event.save")
          .ev-address
            - if @event.street_name?
              span[id = "st_name"]
            - else 
              span[id = "st_name" class = "hide"]
            - if @event.street_number?
              span[id = "st_num"]
            - else 
              span[id = "st_num" class = "hide"]
            = city_name(@event.id)
            /= @event.city_name
          h4.organizer
            = link_to(small_avatar(@event.user.id), {:action => "own_user", :controller => "users", :id => @event.user.id})
              /= image_tag @event.user.avatar.avatar_url(:small)
            =t('events.organizer')
            span  = link_to(@event.user.first_name + " " + @event.user.last_name, {:action => "own_user", :controller => "users", :id => @event.user.id})
          .ev-members
            | 
            =I18n.t('events.members')
            span  
              = @event.all_relationships.count
              | /
              = number_format_people_count(@event.id)
            .ev-members-items
              -@event.all_participations[0..17].each do |u|
                = link_to 'javascript:void(0);' do
                  = link_to(small_avatar(u.id), {:action => "own_user", :controller => "users", :id => u.id})

            - if @event.all_participations.length > 18
              - count = @event.all_participations.length - 18
              = link_to "Решта #{count} #{case_of_member(count)}", event_path(id: @event.id, status: 'more_members'), remote: true, class: 'other_member'

        .medium-8.small-12.columns
          .ev-single-descr-info
            .ev-description
              p = @event.description
            .map-wr
              script[src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry&language=#{I18n.locale.to_s}" type="text/javascript"]
              script[src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js" type="text/javascript"]
              div[style="width: 100%;"]
                #map[style="width: 100%; height: 300px;"]
              - content_for :scripts do
                script
                  |  handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ markers = handler.addMarkers(#{raw @hash.to_json}); handler.bounds.extendWith(markers); handler.fitMapToBounds(); handler.getMap().setZoom(17);}); 
                  |      var findResult = function(results, name){ var result =  _.find(results, function(obj){ return obj.types[0] == name && obj.types[1] == "political"; }); return result ? result.short_name : null;  };

                  | function getAddress(){ var latlng = new google.maps.LatLng(#{@event.latitude}, #{@event.longitude});  geocoder = new google.maps.Geocoder();  geocoder.geocode({'latLng': latlng}, function(results, status) { if (status == google.maps.GeocoderStatus.OK) { results = results[0].address_components;   var city = findResult(results, "locality");  var route = results[0].short_name; var street = results[1].short_name; $('#st_num').html(route + ", "); $('#st_name').html(street + " ");} }); };
                  | getAddress();

            - if !current_user.nil? && current_user.id == @event.user_id
              = form_for @event, :html => {:multipart => true}, :method => 'post', url: {:controller => 'events', :action => 'upload_picture'} do |f|
                .ph-drag-drop
                  p
                    =I18n.t('event.drag_image')
                  p
                    =t('event.or_push_button')
                    = link_to I18n.t('event.btn_download'), "javascript:void(0);", class: "btn-4" 
                  = hidden_field_tag :id, @event.id
                  = file_field_tag "pictures[]", type: :file, multiple: true, class: 'picturesPre pictures1'
                  = hidden_field_tag(:picture, 'picture')
                .preview-area.with-scroll
                = f.submit I18n.t("event.save"), class: "btn-5"
            -if @event.pictures.count > 0
              .ev-single-descr-info.ev-photos
                .date
                  /| 18 травня 2012
                h2
                  = I18n.t('event.photo_report')
                .with-scroll
                  /-count_picture = 0 
                  - @event.pictures.each do |p|
                    .ev-ph-item
                      a href="#{p.picture_url(:large_picture) }" data-lightbox="image-1" data-title="My caption"
                        = image_tag p.picture_url(:medium_picture)
                        - if !current_user.nil? && current_user.id == @event.user_id
                          = link_to 'X', picture_path(p.id), class: "del-img", :method => :delete, :data => { :confirm => I18n.t('event.destroy_photo') }

          .comments-wr
            - if current_user && (@event.event_type == 'open' || ( @event.event_type == 'close' && @event.user.confirm_friend(current_user.id) ) || current_user.id == @event.user.id )
              = simple_form_for([@event, @event.comments.build], remote: true, html: {class: 'send-comment'}) do |f| 
                = f.text_area :body, :placeholder => I18n.t('event.write_comment'), required: true
                = f.submit I18n.t('event.btn_send'), class:"btn-6"
                = button_tag I18n.t('event.btn_cansel'), type: :reset, class: "btn-7"
            - elsif current_user && ( @event.event_type == 'close' && !@event.user.confirm_friend(current_user.id)  && current_user.id != @event.user.id )
              .comment-access
                p = I18n.t('event.only_friends')
            - else
              .comment-access
                p = I18n.t('event.only_reg_users')
                = link_to t('sessions.registration'), new_user_registration_path
                span
                  | |
                = link_to t('header.enter'), new_user_session_path
            .comments_block
              -@event.comments.reverse_each do |comment| 
                - next if comment.new_record?
                = render 'events/comments/comment', comment: comment


    = render "partials/footer"


